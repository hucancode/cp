class Solution {
public:
    void dfs(vector<vector<int>>& graph, vector<bool>& vis, int start) {
        int n = graph.size();
        stack<int> st;
        st.push(start);
        while(!st.empty()) {
            auto u = st.top();
            st.pop();
            if(vis[u]) {
                continue;
            }
            vis[u] = true;
            for(int v = 0;v<n;v++) {
                if(graph[u][v]) {
                    st.push(v);
                }
            }
        }
    }
    int countInfectedNode(vector<bool>& left, vector<bool>& right) {
        int n = left.size();
        int ret = 0;
        for(int i = 0;i<n;i++) {
            if(left[i] || right[i]) {
                ret++;
            }
        }
        return ret;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int m = initial.size();
        vector<vector<bool>> f(m, vector<bool>(n, false));
        vector<vector<bool>> g(m, vector<bool>(n, false));
        for(int i = 1;i<m;i++) {
            f[i] = f[i-1];
            dfs(graph, f[i], initial[i-1]);
        }
        for(int i = m-2;i>=0;i--) {
            g[i] = g[i+1];
            dfs(graph, g[i], initial[i+1]);
        }
        int ret = 0;
        int minSoFar = 2e9;
        for(int i = 0;i<m;i++) {
            int node = initial[i];
            int k = countInfectedNode(f[i], g[i]);
            if(k < minSoFar || (k==minSoFar && node<ret)) {
                minSoFar = k;
                ret = node;
            }
        }
        return ret;
    }
};